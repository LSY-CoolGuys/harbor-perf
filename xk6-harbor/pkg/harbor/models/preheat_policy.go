// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PreheatPolicy preheat policy
//
// swagger:model PreheatPolicy
type PreheatPolicy struct {

	// The Create Time of preheat policy
	// Format: date-time
	CreationTime strfmt.DateTime `json:"creation_time,omitempty" js:"creationTime"`

	// The Description of preheat policy
	Description string `json:"description,omitempty" js:"description"`

	// Whether the preheat policy enabled
	Enabled bool `json:"enabled" js:"enabled"`

	// The Filters of preheat policy
	Filters string `json:"filters,omitempty" js:"filters"`

	// The ID of preheat policy
	ID int64 `json:"id,omitempty" js:"id"`

	// The Name of preheat policy
	Name string `json:"name,omitempty" js:"name"`

	// The ID of preheat policy project
	ProjectID int64 `json:"project_id,omitempty" js:"projectID"`

	// The ID of preheat policy provider
	ProviderID int64 `json:"provider_id,omitempty" js:"providerID"`

	// The Name of preheat policy provider
	ProviderName string `json:"provider_name,omitempty" js:"providerName"`

	// The Trigger of preheat policy
	Trigger string `json:"trigger,omitempty" js:"trigger"`

	// The Update Time of preheat policy
	// Format: date-time
	UpdateTime strfmt.DateTime `json:"update_time,omitempty" js:"updateTime"`
}

// Validate validates this preheat policy
func (m *PreheatPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PreheatPolicy) validateCreationTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationTime) { // not required
		return nil
	}

	if err := validate.FormatOf("creation_time", "body", "date-time", m.CreationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PreheatPolicy) validateUpdateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("update_time", "body", "date-time", m.UpdateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this preheat policy based on context it is used
func (m *PreheatPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PreheatPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PreheatPolicy) UnmarshalBinary(b []byte) error {
	var res PreheatPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
